@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation


<h3>Registro</h3>

<EditForm Model="@registerRequest" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nome">Nome:</label>
        <InputText id="nome" class="form-control" @bind-Value="registerRequest.Nome" />
        <ValidationMessage For="@(() => registerRequest.Nome)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" />
        <ValidationMessage For="@(() => registerRequest.Email)" />
    </div>

    <div class="form-group">
        <label for="senha">Senha:</label>
        <InputText type="password" id="senha" class="form-control" @bind-Value="registerRequest.Senha" />
        <ValidationMessage For="@(() => registerRequest.Senha)" />
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@code {
    private RegisterRequest registerRequest = new RegisterRequest();

    private async Task HandleRegister()
    {
        var response = await Http.PostAsJsonAsync("api/auth/register", registerRequest);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            // Exibir mensagem de erro para o usuário
        }
    }

    public class RegisterRequest
    {
        [Required(ErrorMessage = "Nome é obrigatório.")]
        public string Nome { get; set; }

        [Required(ErrorMessage = "Email é obrigatório.")]
        [EmailAddress(ErrorMessage = "Email inválido.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Senha é obrigatória.")]
        [MinLength(6, ErrorMessage = "Senha deve ter pelo menos 6 caracteres.")]
        public string Senha { get; set; }
    }
}